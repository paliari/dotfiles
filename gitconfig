[core]
	excludesfile = /Users/neves/.gitignore
  editor = subl -w
  eol = lf

[color]
  ui = true

[color "status"]
  updated = green
  changed = yellow
  untracked = red
  branch = red
  nobranch = red reverse

[alias]
  # https://git.wiki.kernel.org/index.php/Aliases
  # http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  # https://github.com/evbogue/git-aliases/blob/master/bash_aliases
  # https://github.com/michel-kraemer/gitaliases/blob/master/gitaliases.sh

  s = status -s
  c = commit -m
  # commit after merge
  cm = commit --no-edit
  # merge without commit
  m = "!f() { git merge --no-ff --no-commit $@ && git status -s; }; f"
  co = checkout
  a = "!f() { git add -A $@ && git status -s; }; f"
  d = diff --diff-filter=M --unified=0 --minimal --patience --no-prefix --no-renames
  amend = commit --amend --no-edit
  reset-clean     = "!git status && git reset --hard && git clean -f  && git status"
  reset-clean-dir = "!git status && git reset --hard && git clean -fd && git status"

  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  unstage = reset HEAD              # remove files from index (tracking)
  filelog = log -u                  # show changes to a file
  todo = grep --line-number --word-regexp @TODO
  aliases = "!git config -l | grep alias | cut -c 7-"

  dev = checkout develop
  master = checkout master

  last = diff --unified=0 HEAD^

  ls = log --all --date=short --format=format:'%C(bold yellow)%h %C(bold green)%ad %C(reset)%s %C(bold blue)[%an]%C(bold red)%d' --graph
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/#use_snapshot_stashes
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/#file_level_ignoring
  ignore   = update-index --assume-unchanged
  unignore = update-index --no-assume-unchanged
  ignored  = "!git ls-files -v | grep ^h | cut -c 3-"

  # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/#them_and_us
  ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/#comparing_large_chunks_of_text
  algorithm = patience

[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = matching

[include]
  path = ~/.gitconfig.user
[merge]
	tool = p4merge
[mergetool]
	prompt = false
	keepBackup = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /opt/homebrew-cask/Caskroom/sourcetree/2.0.5.3/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
